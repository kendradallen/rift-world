@model RiftWorld.DATA.EF.Character

@{
    ViewBag.Title = "Admin Character Create";
    int nameMax;
    int descripMax;
    int aboutMax;
    int classMax;
    int startCharacterName = nameMax = 25;
    int startDescription = descripMax = 2000;
    int startAbout = aboutMax = 8000;
    int startClassString = classMax = 40;
    if (Model != null)
    {
        if (Model.CharacterName != null)
        {
            startCharacterName -= Model.CharacterName.Length;
        }
        if (Model.Description != null)
        {
            startDescription -= Model.Description.Length;
        }
        if (Model.About != null)
        {
            startAbout -= Model.About.Length;
        }
        if (Model.ClassString != null)
        {
            startClassString -= Model.ClassString.Length;
        }
    }
}

<div class="col-12">

    <h2>@ViewBag.Title</h2>

    @using (Html.BeginForm("AdminCreate", "Characters", FormMethod.Post, new { @enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        <div class="col-auto oops-summary">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.CharacterName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="da-focus">
                    @Html.EditorFor(model => model.CharacterName, new { htmlAttributes = new { @class = "form-control count", data_max = nameMax, style = "font-size:.9em;" } })
                </div>
                @Html.ValidationMessageFor(model => model.CharacterName, "", new { @class = "text-danger" })
                <div id="tcp-CharacterName" class="col-md-offset-2 col-12 @(startCharacterName <0 ? "invalid":"")"><span id="tc-CharacterName">@startCharacterName</span> character(s) left.</div>
            </div>
        </div>


        <div class="form-group row">
            @Html.LabelFor(model => model.RaceId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("RaceId", (SelectList)ViewBag.RaceId, "", htmlAttributes: new { @class = "" })
                @Html.ValidationMessageFor(model => model.RaceId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.GenderId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("GenderId", (SelectList)ViewBag.GenderId, "", htmlAttributes: new { @class = "" })
                @Html.ValidationMessageFor(model => model.GenderId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group row">
            @Html.LabelFor(model => model.ClassString, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="da-focus">
                    @Html.EditorFor(model => model.ClassString, new { htmlAttributes = new { @class = "form-control count", data_max = classMax, style = "font-size:.9em;" } })
                </div>
                @Html.ValidationMessageFor(model => model.ClassString, "", new { @class = "text-danger" })
                <div id="tcp-ClassString" class="col-md-offset-2 col-12 @(startClassString <0 ? "invalid":"")"><span id="tc-ClassString">@startClassString</span> character(s) left.</div>

            </div>
        </div>

        <div class="form-group row">
            <label for="TierId" class="control-label col-md-2">Tier <button type="button" class="btn" data-toggle="tooltip" data-html="true" title="Determined by level<br/><b>Low</b>: 1-4<br/><b>Mid</b>: 5-10<br/><b>High</b>: 11-16<br/><b>God</b>: 17-20"><i class="far fa-question-circle"></i></button> </label>
            <div class="col-md-10">
                @Html.DropDownList("TierId", (SelectList)ViewBag.TierId, "", htmlAttributes: new { @class = "" })
                @Html.ValidationMessageFor(model => model.TierId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <label for="picture" class="control-label col-md-2">Portrait <button id="tips" type="button" class="btn" data-toggle="tooltip" data-html="true" title="File size: 75kb or less<br/>Click for tips on making it look great!"><i class="far fa-question-circle"></i></button> </label>
            <div class="col-md-10 row">
                @Html.HiddenFor(model => model.PortraitFileName)
                <div class="col-12">
                    <input type="file" name="picture" id="imgInp" />
                    <img class="img-fluid img-thumbnail border-00" src="~/Content/img/npc/default.jpg" id="imgPre" />
                </div>
                <div class="col-12">
                    @Html.ValidationMessageFor(model => model.PortraitFileName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group row">
            <label for="Artist" class="control-label col-md-2">Artist <button type="button" class="btn" data-toggle="tooltip" data-html="true" title="Who drew(or captured) that beautiful art of yours?<br/>Can be left blank if you are also leaving the Portrait blank"><i class="far fa-question-circle"></i></button> </label>
            <div class="col-md-10">
                <div class="da-focus">
                    @Html.EditorFor(model => model.Artist, new { htmlAttributes = new { @class = "form-control", style = "font-size:.9em;" } })
                </div>
                @Html.ValidationMessageFor(model => model.Artist, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.CurrentLocationId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CurrentLocationId", (SelectList)ViewBag.CurrentLocationId, "", htmlAttributes: new { @class = "" })
                @Html.ValidationMessageFor(model => model.CurrentLocationId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group row">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="da-focus">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control count", data_max = descripMax, style = "height: 7em;font-size:1em;", placeholder = "How your character physically appears" } })
                </div>
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                <div id="tcp-Description" class="col-md-offset-2 col-12 @(startDescription <0 ? "invalid":"")"><span id="tc-Description">@startDescription</span> character(s) left.</div>

            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.About, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="da-focus">
                    @Html.EditorFor(model => model.About, new { htmlAttributes = new { @class = "form-control count", data_max = aboutMax, style = "height: 10em;font-size:1em;" } })
                </div>
                @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
                <div id="tcp-About" class="col-md-offset-2 col-12 @(startAbout <0 ? "invalid":"")"><span id="tc-About">@startAbout</span> character(s) left.</div>

            </div>
        </div>

        <div class="form-group">
            <div class="form-check larger">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsDead, new { htmlAttribute = new { @class = "form-check-input" } })
                    @Html.LabelFor(model => model.IsDead, new { htmlAttribute = new { @class = "form-check-label" } })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PlayerId, "PlayerId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-12">
                @Html.DropDownList("PlayerId", (SelectList)ViewBag.PlayerId, "", htmlAttributes: new { @class = "" })
                @Html.ValidationMessageFor(model => model.PlayerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BackupPortrayerName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="da-focus">
                    @Html.EditorFor(model => model.BackupPortrayerName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter the part of the discord name before the # but only if the player is not on the site", style = "font-size:.9em;" } })

                </div>
                @Html.ValidationMessageFor(model => model.BackupPortrayerName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-12">
                <input type="submit" value="Create" class="btn btn-success btn-block btn-lg" />
            </div>
        </div>
    </div>
    }

    <div style="text-align:left;">
        @Html.ActionLink("Cancel", "Index")
    </div>

    <div class="modal fade" id="tipsModal" tabindex="-1" role="dialog" aria-labelledby="tipsModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="tipsModalLabel">Tips to look awesome!</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>
                        You are hard capped at 75kb file size you can upload. Here is a resource I find extremely helpful.
                    </p>
                    <p>
                        I recommend both to help remain under this limit and to look good to keep an image relatively small. The above provided link can allow to to shrink the size of an image. In general, I would recommend keeping the dimensions at most 450 by 450. But smaller sizes have never caused an issue.
                    </p>
                    <p>
                        The aspect ratios that will make your picture look the best are 4-3 or 1-1 when displaying your character.
                        Height will be the main factor that cause the character display to look worse
                    </p>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts{
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script src="~/Scripts/SelectBoxes/slimselect.min.js"></script>
    <script src="~/Scripts/MyJS/edit.min.js"></script>
    <script>
        $('select#GenderId option:first-child').attr("data-placeholder", "true");
        $('select#RaceId option:first-child').attr("data-placeholder", "true");
        $('select#CurrentLocationId option:first-child').attr("data-placeholder", "true");
        $('select#TierId option:first-child').attr("data-placeholder", "true");
        $('select#PlayerId option:first-child').attr("data-placeholder", "true");
    </script>
    <script>
        //slim select tags
        new SlimSelect({
            select: '#RaceId',
            placeholder: "Species"
        })
        new SlimSelect({
            select: '#GenderId',
            showSearch: false,
            placeholder: "Gender"
        })
        new SlimSelect({
            select: '#CurrentLocationId',
            placeholder: "Current Location"
        })
        new SlimSelect({
            select: '#TierId',
            showSearch: false,
            placeholder: "Tier upon retirement"
        })
        new SlimSelect({
            select: '#PlayerId',
            showSearch: false,
            placeholder: "Who's the player? (only select if they are on site)"
        })
        //preview of uploaded img
        $("#imgInp").change(function () {
            readURL(this, '#imgPre');
        });

        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        })


        $("#tips").click(function (e) {
            e.preventDefault();
            getme();
        });
        function getme() {
            $('#tipsModal').modal('show');
        }
    </script>
}