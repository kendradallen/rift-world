@model RiftWorld.DATA.EF.Character

@{
    ViewBag.Title = "Edit" + Model.CharacterName;
    int startCharacterName = ViewBag.startCharacterName;
    int startDescription = ViewBag.startDescription;
    int startAbout = ViewBag.startAbout;
    int startClass = ViewBag.startClass;

}

<div class="col-12 player">
    <h2>@ViewBag.Title</h2>

    @using (Html.BeginForm("Edit", "Characters", FormMethod.Post, new { @enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.CharacterId)
            @Html.HiddenFor(model => model.PlayerId)
            @Html.HiddenFor(model => model.IsApproved)
            @Html.HiddenFor(model => model.IsRetired)
            @Html.HiddenFor(model => model.IsDead)


            <div class="form-group row">
                @Html.LabelFor(model => model.CharacterName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.CharacterName, new { htmlAttributes = new { @class = "form-control count", data_max = 25 } })
                    </div>
                    @Html.ValidationMessageFor(model => model.CharacterName, "", new { @class = "text-danger" })
                    <div id="tcp-CharacterName" class="col-md-offset-2 col-12 @(startCharacterName <0 ? "invalid":"")"><span id="tc-CharacterName">@startCharacterName</span> character(s) left.</div>

                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.RaceId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("RaceId", null, htmlAttributes: new { @class = "" })
                    @Html.ValidationMessageFor(model => model.RaceId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.GenderId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("GenderId", null, htmlAttributes: new { @class = "" })
                    @Html.ValidationMessageFor(model => model.GenderId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.ClassString, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.ClassString, new { htmlAttributes = new { @class = "form-control count", data_max = 40 } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ClassString, "", new { @class = "text-danger" })
                    <div id="tcp-Class" class="col-md-offset-2 col-12 @(startClass <0 ? "invalid":"")"><span id="tc-Class">@startClass</span> character(s) left.</div>

                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.TierId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("TierId", null, htmlAttributes: new { @class = "" })
                    @Html.ValidationMessageFor(model => model.TierId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.PortraitFileName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 row">
                    @*@Html.EditorFor(model => model.PortraitFileName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.PortraitFileName, "", new { @class = "text-danger" })*@
                    @Html.HiddenFor(model => model.PortraitFileName)
                    <div class="col-12">
                        <input type="file" name="picture" />
                        <img class="img-fluid img-thumbnail border-00" src="~/Content/img/character/@Model.PortraitFileName" />
                    </div>
                    <div class="col-12">
                        @Html.ValidationMessageFor(model => model.PortraitFileName, "", new { @class = "text-danger" })
                    </div>

                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Artist, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Artist, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Artist, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.CurrentLocationId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("CurrentLocationId", null, htmlAttributes: new { @class = "" })
                    @Html.ValidationMessageFor(model => model.CurrentLocationId, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group row">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control count", data_max = 2000, style = "height: 7em" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    <div id="tcp-Description" class="col-md-offset-2 col-12 @(startDescription <0 ? "invalid":"")"><span id="tc-Description">@startDescription</span> character(s) left.</div>

                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.About, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.About, new { htmlAttributes = new { @class = "form-control count", data_max = 8000, style = "height: 10em" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
                    <div id="tcp-About" class="col-md-offset-2 col-12 @(startAbout <0 ? "invalid":"")"><span id="tc-About">@startAbout</span> character(s) left.</div>

                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/MyJS/edit.js"></script>
    <script>
        //slim select tags
        new SlimSelect({
            select: '#RaceId'
        })
        new SlimSelect({
            select: '#GenderId',
            showSearch: false
        })
        new SlimSelect({
            select: '#CurrentLocationId'
        })
        new SlimSelect({
            select: '#TierId',
            showSearch: false
        })
    </script>
}
