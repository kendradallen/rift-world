@*@model RiftWorld.DATA.EF.Item*@
@model RiftWorld.UI.MVC.Models.ItemCreateVM
@using RiftWorld.DATA.EF;

@{
    ViewBag.Title = "Item Create";
    int startName = ViewBag.startName;
    int startBlurb = ViewBag.startBlurb;
    int startArtist = ViewBag.startArtist;
}

<div class="col-12">
    <h2>@ViewBag.Title</h2>

    @using (Html.BeginForm("Create", "Items", FormMethod.Post, new { @enctype = "multipart/form-data", id = "daForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            <div class="col-12">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
            @Html.HiddenFor(model => model.IsPublished)
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control count", data_max = 50 } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    <div id="tcp-Name" class="col-md-offset-2 col-12 @(startName <0 ? "invalid":"")"><span id="tc-Name">@startName</span> character(s) left.</div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Blurb, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Blurb, new { htmlAttributes = new { @class = "form-control count", data_max = 100, style = "height:4em;" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Blurb, "", new { @class = "text-danger" })
                    <div id="tcp-Blurb" class="col-md-offset-2 col-12 @(startBlurb <0 ? "invalid":"")"><span id="tc-Blurb">@startBlurb</span> character(s) left.</div>
                </div>
            </div>

            <div class="form-group row align-items-center">
                @Html.LabelFor(model => model.PictureFileName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 row">
                    @Html.HiddenFor(model => model.PictureFileName)
                    <div class="col-12">
                        <input type="file" name="picture" />
                        <img class="img-fluid img-thumbnail border-00" src="~/Content/img/item/default.jpg" />
                    </div>
                    <div class="col-12">
                        @Html.ValidationMessageFor(model => model.PictureFileName, "", new { @class = "text-danger" })
                    </div>

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Artist, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Artist, new { htmlAttributes = new { @class = "form-control count", data_max = 40 } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Artist, "", new { @class = "text-danger" })
                    <div id="tcp-Artist" class="col-md-offset-2 col-12 @(startArtist <0 ? "invalid":"")"><span id="tc-Artist">@startArtist</span> character(s) left.</div>

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DescriptionText, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    @Html.EditorFor(model => model.DescriptionText, new { htmlAttributes = new { @class = "form-control rich", style = "height:20em;" } })
                    @Html.ValidationMessageFor(model => model.DescriptionText, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PropertyText, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    @Html.EditorFor(model => model.PropertyText, new { htmlAttributes = new { @class = "form-control rich", style = "height:20em;" } })
                    @Html.ValidationMessageFor(model => model.PropertyText, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HistoryText, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    @Html.EditorFor(model => model.HistoryText, new { htmlAttributes = new { @class = "form-control rich", style = "height:20em;" } })
                    @Html.ValidationMessageFor(model => model.HistoryText, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label for="tags">Tags</label>
                <!-- Below commented out is the original multi-select for tags. DO NOT DELETE!!!!!!! -->
                @*<select multiple="multiple" name="tags" id="tags">
                        @foreach (var x in ViewBag.Tags)
                        {
                            <option value="@x.TagId">@x.TagName</option>
                        }
                    </select>*@
                @Html.ListBox("tags", (MultiSelectList)ViewBag.Tags)
            </div>


            <div class="form-group">
                <div class="col-12 btn-group">
                    <input type="submit" name="submit" value="Save Progress" class="btn btn-warning" />
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#confirmModal">
                        Publish
                    </button>
                </div>
            </div>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="confirmModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to publish?</p>
                        <div id="nulled">

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <input type="submit" name="submit" value="Publish" class="btn btn-success" />
                    </div>
                </div>
            </div>
        </div>


    }

    <div style="text-align:left;">
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>

@section Scripts{
    <script src="~/Scripts/MyJS/edit.js"></script>

    <script>
        new SlimSelect({
            select: '#tags'
        })
    </script>
    <script>
        var nullables = ['DescriptionText', 'PropertyText', 'HistoryText'];
        $('#confirmModal').on('show.bs.modal', function () {
            ConfirmModal(nullables);
        });
    </script>


}