@model RiftWorld.UI.MVC.Models.AssoOrgVM

@{
    ViewBag.Title = "Editing " + Model.Name + " - Complex";
    List<short> theSelectedNpcs = Model.AssoNpcs.Select(a => a.NpcId).ToList();
    List<short> theSelectedEvents = Model.AssoEvents.Select(a => a.EventId).ToList();
    List<short> theSelectedCharas = Model.AssoChars.Select(a => a.CharId).ToList();

    int npcNpcPageBlurb_Max = 100;
    int npcOrgPageBlurb_Max = 100;
    int eventBlurb_Max = 100;
    int charBlurb_Max = 100;
}

<div class="col-12">
    <h2>@ViewBag.Title</h2>
    <button class="btn btn-outline-secondary" onclick="ShowAll()">Show All</button>
    <button class="btn btn-outline-secondary" onclick="HideAll()">Hide All</button>

    @using (Html.BeginForm("AssoEdit", "Orgs", FormMethod.Post, new { id = "daForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.InfoId)
            @Html.HiddenFor(model => model.OrgId)
            @Html.HiddenFor(model => model.Submit)
            <div class="form-group">
                <label for="npc">Members - NPCs</label>
                <select multiple="multiple" name="npc" id="npc">
                    @foreach (var x in ViewBag.Npcs)
                    {
                        <option class="@(x.IsPublished ? "":"unpub")" value="@x.NpcId" @(theSelectedNpcs.Contains(x.NpcId) ? "selected" : "") data-list="npc">@x.Name</option>
                    }
                </select>
                <div class="other-stuff" data-list="npc">
                    @foreach (var x in ViewBag.Npcs)
                    {
                        <div data-value="@x.NpcId" data-list="npc" style="display:none" class="@(theSelectedNpcs.Contains(x.NpcId) ? "yes-man": "")">
                            <h5>@x.Name</h5>
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Org Order</span>
                                </div>
                                <div class="da-focus asso input-group-append form-control">
                                    <input class="form-control" data-value="@x.NpcId" type="number" data-name="org-order" value="@(theSelectedNpcs.Contains(x.NpcId) ? (Model.AssoNpcs.Where(a => a.NpcId == x.NpcId).Select(a => a.OrgOrder).FirstOrDefault().ToString()) : "")" />
                                </div>
                            </div>

                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Blurb for NPC's page about postion in org</span>
                                </div>
                                <div class="da-focus asso input-group-append form-control">
                                    <input class="form-control count" data-value="@x.NpcId" type="text" data-name="blurb-npc-page" data-max="@npcNpcPageBlurb_Max" data-list="npc" value="@(theSelectedNpcs.Contains(x.NpcId) ? (Model.AssoNpcs.Where(a => a.NpcId == x.NpcId).Select(a => a.BlurbNpcPage).FirstOrDefault()) : "")" />
                                </div>
                                <div id="tcp_npc-blurb-npc-page-@x.NpcId" class=" tcp col-md-offset-2 col-12">
                                    <span id="tc_npc-blurb-npc-page-@x.NpcId">
                                        @(theSelectedNpcs.Contains(x.NpcId) ? (Model.AssoNpcs.Where(a => a.NpcId == x.NpcId).Select(a => a.BlurbNpcPage).FirstOrDefault() == null ? npcNpcPageBlurb_Max.ToString() : (npcNpcPageBlurb_Max - Model.AssoNpcs.Where(a => a.NpcId == x.NpcId).Select(a => a.BlurbNpcPage).First().Length).ToString()) : npcNpcPageBlurb_Max.ToString())
                                    </span> character(s) left.
                                </div>

                            </div>

                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Blurb for org's page about NPC's role</span>
                                </div>
                                <div class="da-focus asso input-group-append form-control">
                                    <input class="form-control count" data-value="@x.NpcId" type="text" data-name="blurb-org-page" data-max="@npcOrgPageBlurb_Max" data-list="npc" value="@(theSelectedNpcs.Contains(x.NpcId) ? (Model.AssoNpcs.Where(a => a.NpcId == x.NpcId).Select(a => a.BlurbOrgPage).FirstOrDefault()) : "")" />
                                </div>
                                <div id="tcp_npc-blurb-org-page-@x.NpcId" class=" tcp col-md-offset-2 col-12">
                                    <span id="tc_npc-blurb-org-page-@x.NpcId">
                                        @(theSelectedNpcs.Contains(x.NpcId) ? (Model.AssoNpcs.Where(a => a.NpcId == x.NpcId).Select(a => a.BlurbOrgPage).FirstOrDefault() == null ? npcOrgPageBlurb_Max.ToString() : (npcOrgPageBlurb_Max - Model.AssoNpcs.Where(a => a.NpcId == x.NpcId).Select(a => a.BlurbOrgPage).First().Length).ToString()) : npcOrgPageBlurb_Max.ToString())
                                    </span> character(s) left.
                                </div>

                            </div>

                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Priority of NPC display on org's page</span>
                                </div>
                                <div class="da-focus asso input-group-append form-control">
                                    <input class="form-control" data-value="@x.NpcId" type="number" data-name="member-order" value="@(theSelectedNpcs.Contains(x.NpcId) ? (Model.AssoNpcs.Where(a => a.NpcId == x.NpcId).Select(a => a.MemberOrder).FirstOrDefault().ToString()) : "")" />
                                </div>
                            </div>

                            <div class="input-group">
                                <div class="form-check">
                                    <input class="form-check-input" data-value="@x.NpcId" type="checkbox" value="" data-name="current" @(Model.AssoNpcs.Where(a => a.NpcId == x.NpcId && !a.IsCurrent).FirstOrDefault() != null ? "" : "checked" ) />
                                    <label class="form-check-label" for="@x.NpcId">current member</label>
                                </div>
                            </div>

                        </div>

                    }
                </div>
            </div>
            <div class="form-group">
                <label for="event">Events</label>
                <select multiple="multiple" name="event" id="event">
                    @foreach (var x in ViewBag.Events)
                    {
                        <option class="@(x.IsPublished ? "":"unpub")" value="@x.EventId" @(theSelectedEvents.Contains(x.EventId) ? "selected" : "") data-list="event">@x.Name</option>
                    }
                </select>
                <div class="other-stuff" data-list="event">
                    @foreach (var x in ViewBag.Events)
                    {
                        <div data-value="@x.EventId" data-list="event" style="display:none" class="@(theSelectedEvents.Contains(x.EventId) ? "yes-man": "")">
                            <h5>@x.Name</h5>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Blurb</span>
                                </div>
                                <div class="da-focus asso input-group-append form-control">
                                    <input class="form-control count" data-value="@x.EventId" type="text" data-list="event" data-name="blurb" data-max="@eventBlurb_Max" value="@(theSelectedEvents.Contains(x.EventId) ? (Model.AssoEvents.Where(a => a.EventId == x.EventId).Select(a => a.Blurb).FirstOrDefault()) : "")" />
                                </div>
                                <div id="tcp_event-blurb-@x.EventId" class=" tcp col-md-offset-2 col-12">
                                    <span id="tc_event-blurb-@x.EventId">
                                        @(theSelectedEvents.Contains(x.EventId) ? (Model.AssoEvents.Where(a => a.EventId == x.EventId).Select(a => a.Blurb).FirstOrDefault() == null ? eventBlurb_Max.ToString() : (eventBlurb_Max - Model.AssoEvents.Where(a => a.EventId == x.EventId).Select(a => a.Blurb).First().Length).ToString()) : eventBlurb_Max.ToString())
                                    </span> character(s) left.
                                </div>
                            </div>

                        </div>
                    }

                </div>
            </div>
            <div class="form-group">
                <label for="chara">Members - Characters</label>
                <select multiple="multiple" name="chara" id="chara">
                    @foreach (var x in ViewBag.Characters)
                    {
                        <option value="@x.CharacterId" class="@(theSelectedCharas.Contains(x.CharacterId) ? ((Model.AssoChars.Where(a => a.CharId == x.CharacterId && !a.KatherineApproved).FirstOrDefault() != null)? "unpub": ""):"")" @(theSelectedCharas.Contains(x.CharacterId) ? "selected" : "") data-list="chara">@x.CharacterName</option>
                    }
                </select>
                <div class="other-stuff" data-list="chara">
                    @foreach (var x in ViewBag.Characters)
                    {
                        <div data-value="@x.CharacterId" data-list="chara" style="display:none" class="@(theSelectedCharas.Contains(x.CharacterId) ? "yes-man": "")">
                            <h5>@x.CharacterName</h5>
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Blurb for org page</span>
                                </div>
                                <div class="da-focus asso input-group-append form-control">
                                    <input class="form-control count" data-value="@x.CharacterId" type="text" data-list="chara" data-name="blurb" data-max="@charBlurb_Max" value="@(theSelectedCharas.Contains(x.CharacterId) ? (Model.AssoChars.Where(a => a.CharId == x.CharacterId).Select(a => a.BlurbOrgPage).FirstOrDefault()) : "")" />
                                </div>
                                <div id="tcp_chara-blurb-@x.CharacterId" class=" tcp col-md-offset-2 col-12">
                                    <span id="tc_chara-blurb-@x.CharacterId">
                                        @(theSelectedCharas.Contains(x.CharacterId) ? (Model.AssoChars.Where(a => a.CharId == x.CharacterId).Select(a => a.BlurbOrgPage).FirstOrDefault() == null ? charBlurb_Max.ToString() : (charBlurb_Max - Model.AssoChars.Where(a => a.CharId == x.CharacterId).Select(a => a.BlurbOrgPage).First().Length).ToString()) : charBlurb_Max.ToString())
                                    </span> character(s) left.
                                </div>
                            </div>
                            <div class="input-group mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" data-value="@x.CharacterId" type="checkbox" value="" data-name="katherine-approved" @(Model.AssoChars.Where(a => a.CharId == x.CharacterId && !a.KatherineApproved).FirstOrDefault() != null ? "" : "checked" ) />
                                    <label class="form-check-label" for="@x.CharacterId">Katherine Approved</label>
                                </div>
                            </div>
                            <div class="input-group mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" data-value="@x.CharacterId" type="checkbox" value="" data-name="current" @(Model.AssoChars.Where(a => a.CharId == x.CharacterId && !a.IsCurrent).FirstOrDefault() != null ? "" : "checked" ) />
                                    <label class="form-check-label" for="@x.CharacterId">current member</label>
                                </div>
                            </div>
                            <div class="input-group mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" data-value="@x.CharacterId" type="checkbox" value="" data-name="public" @(Model.AssoChars.Where(a => a.CharId == x.CharacterId && !a.IsPublic).FirstOrDefault() != null ? "" : "checked" ) />
                                    <label class="form-check-label" for="@x.CharacterId">Public Member</label>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>

            <div class="form-group">
                <div class="col-12">
                    <input id="daSubmit" type="submit" value="Save" class="btn btn-block btn-success btn-lg" />
                </div>
            </div>
        </div>
    }
    <div style="text-align:left;">
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>

@section Scripts{
    <script src="~/Scripts/SelectBoxes/multi.js"></script>
    <script src="~/Scripts/MyJS/assoedit.js"></script>
    <script>
        class AssoNpc {
            constructor(npcid, orgOrder, blurbNpc, blurbOrg, memberOrder, isCurrent) {
                this.NpcId = npcid;
                this.OrgOrder = orgOrder;
                this.BlurbNpcPage = blurbNpc;
                this.BlurbOrgPage = blurbOrg;
                this.MemberOrder = memberOrder;
                this.IsCurrent = isCurrent;
            }
        }

        class AssoEvent {
            constructor(eventid, blurb) {
                this.EventId = eventid;
                this.Blurb = blurb;
            }
        }

        class AssoChara {
            constructor(charId, blurb, approved, current, ispublic) {
                this.CharId = charId;
                this.BlurbOrgPage = blurb;
                this.IsPublic = ispublic;
                this.KatherineApproved = approved;
                this.IsCurrent = current;
            }
        }

        class TheSubmitted {
            constructor(mems, events, charas) {
                this.InfoId = $("#InfoId").val();
                this.OrgId = $("#OrgId").val();
                this.Submit = $("#Submit").val();
                this.__RequestVerificationToken = $('input[name="__RequestVerificationToken"]', $('#daForm')).val();
                this.Npcs = mems;
                this.Events = events;
                this.Charas = charas;
            }
        }

        $("#daForm").submit(function (e) {
            e.preventDefault();
            var postNpc = [];
            var postEvent = [];
            var postChara = [];
            $(function () {
                $(".selected-wrapper a").each(function () {
                    var t = $(this).data("value");
                    var list = $(this).data("list");
                    switch (list) {
                        case "npc":
                            var orgOrder = GetDataPt(t, "org-order", list);
                            var blurbnpc = GetDataPt(t, "blurb-npc-page", list);
                            var blurborg = GetDataPt(t, "blurb-org-page", list);
                            var memOrder = GetDataPt(t, "member-order", list);
                            var current = IsChecked(t, "current", list);
                            postNpc.push(new AssoNpc(t, orgOrder, blurbnpc, blurborg, memOrder, current));
                            break;
                        case "event":
                            var blurb = GetDataPt(t, "blurb", list);
                            postEvent.push(new AssoEvent(t, blurb));
                            console.log(postEvent);
                            break;
                        case "chara":
                            var blurb = GetDataPt(t, "blurb", list);
                            var current = IsChecked(t, "current", list);
                            var approved = IsChecked(t, "katherine-approved", list);
                            var ispublic = IsChecked(t, "public", list);
                            postChara.push(new AssoChara(t, blurb, approved, current, ispublic));
                            break;
                    }
                });

                var deFormData = new TheSubmitted(postNpc, postEvent, postChara);
                 $(document).ready(function () {
                    $.ajax({
                        url: "@Url.Action("AssoEdit","Orgs")",
                        type: "POST",
                        data: deFormData,
                        success: function (data) {
                            if (data == true) {
                                window.location.href = "/Orgs/Details/" + @Model.OrgId;
                            }
                            else {

                            }
                        }
                    });
                });
            });

        });

    </script>
}