@model RiftWorld.UI.MVC.Models.RiftCreateVM

@{
    ViewBag.Title = "Rift Create";
    int nicknameMax;
    int locationMax;
    int blurbMax;
    int startNickname = nicknameMax = 50;
    int startLocation = locationMax = 300;
    int startBlurb = blurbMax = 350;
    if (Model != null)
    {
        if (Model.Nickname != null)
        {
            startNickname -= Model.Nickname.Length;
        }
        if (Model.Location != null)
        {
            startLocation -= Model.Location.Length;
        }
        if (Model.Blurb != null)
        {
            startBlurb -= Model.Blurb.Length;
        }
    }
}

<div class="col-12">
    <h2>@ViewBag.Title</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            <div class="col-auto oops-summary">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
            @Html.HiddenFor(model => model.IsPublished)

            <div class="form-group">
                @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control count", data_max = locationMax, style = "height:4em;" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                    <div id="tcp-Location" class="col-md-offset-2 col-12 @(startLocation <0 ? "invalid":"")"><span id="tc-Location">@startLocation</span> character(s) left.</div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Nickname, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Nickname, new { htmlAttributes = new { @class = "form-control count", data_max = nicknameMax } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Nickname, "", new { @class = "text-danger" })
                    <div id="tcp-Nickname" class="col-md-offset-2 col-12 @(startNickname <0 ? "invalid":"")"><span id="tc-Nickname">@startNickname</span> character(s) left.</div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Blurb, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Blurb, new { htmlAttributes = new { @class = "form-control count", data_max = blurbMax, style = "height:4em;" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Blurb, "", new { @class = "text-danger" })
                    <div id="tcp-Blurb" class="col-md-offset-2 col-12 @(startBlurb <0 ? "invalid":"")"><span id="tc-Blurb">@startBlurb</span> character(s) left.</div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Environment, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    @Html.EditorFor(model => model.Environment, new { htmlAttributes = new { @class = "form-control rich", style = "height:30em;" } })
                    @Html.ValidationMessageFor(model => model.Environment, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Hazards, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    @Html.EditorFor(model => model.Hazards, new { htmlAttributes = new { @class = "form-control rich", style = "height:30em;" } })
                    @Html.ValidationMessageFor(model => model.Hazards, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label for="tags">Tags</label>
                @Html.ListBox("tags", (MultiSelectList)ViewBag.Tags)
            </div>

            <!--todo remove display:none  and class disabled once logic for info being secret done-->
            <div class="form-group disabled" style="display:none;">
                <div class="form-check larger">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsSecret, new { htmlAttribute = new { @class = "form-check-input" } })
                        @Html.LabelFor(model => model.IsSecret, htmlAttributes: new { @class = "form-check-label" })
                    </div>
                </div>
            </div>

            <!-- Modal -->
            <div class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="confirmModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to publish?</p>
                            <div id="nulled">

                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <input type="submit" name="submit" value="Publish" class="btn btn-success" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-12 btn-group">
                    <input type="submit" name="submit" value="Save and Continue" class="btn btn-warning" />
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#confirmModal">
                        Publish
                    </button>
                </div>
            </div>
        </div>
    }

    <div style="text-align:left;">
        @Html.ActionLink("Cancel", "CreateWhat", "Infos", null, null)
    </div>
</div>

@section Scripts{
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script src="~/Scripts/SelectBoxes/slimselect.min.js"></script>
    <script src="~/Scripts/MyJS/edit.min.js"></script>
    <script>
        var nullables = ['Environment', 'Hazards'];
        $('#confirmModal').on('show.bs.modal', function () {
            ConfirmModal(nullables);
        });
    </script>
    <script>
        //slim select tags
        new SlimSelect({
            select: '#tags'
        })
    </script>
}