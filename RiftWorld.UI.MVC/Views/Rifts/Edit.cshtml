@*@model RiftWorld.DATA.EF.Rift*@
@model RiftWorld.UI.MVC.Models.RiftEditVM

@{
    ViewBag.Title = "Editing " + Model.Nickname;
    List<short> theSelected = ViewBag.Selected;
    int nicknameMax;
    int locationMax;
    int blurbMax;
    int startNickname = nicknameMax = 50;
    int startLocation = locationMax = 300;
    int startBlurb = blurbMax = 100;
    if (Model.Nickname != null)
    {
        startNickname -= Model.Nickname.Length;
    }
    if (Model.Location != null)
    {
        startLocation -= Model.Location.Length;
    }
    if (Model.Blurb != null)
    {
        startBlurb -= Model.Blurb.Length;
    }
}

<div class="btn-group-vertical quick">
    <a href="#tipity-topity" class="quick"><i class="fas fa-angle-double-up"></i></a>
    <a href="#qFinish" class="quick"><i class="fas fa-angle-double-down"></i></a>
</div>


<div class="col-12">
    <h2>@ViewBag.Title</h2>
    <!-- Quick nav toolbar -->
    <div class="btn-group quick">
        <a class="btn btn-secondary" href="#qLocation">Location</a>
        <a class="btn btn-secondary" href="#qNickname">Nickname</a>
        <a class="btn btn-secondary" href="#qBlurb">Blurb</a>
        <a class="btn btn-secondary" href="#qEnvironment">Environment</a>
        <a class="btn btn-secondary" href="#qHazards">Hazards</a>
        <a class="btn btn-secondary" href="#qTags">Tags</a>
    </div>

    <!-- Edit form -->
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            <div class="col-auto oops-summary">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
            @Html.HiddenFor(model => model.RiftId)
            @Html.HiddenFor(model => model.InfoId)
            @Html.HiddenFor(model => model.IsPublished)

            <div class="form-group" id="qLocation">
                @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control count", data_max = locationMax, style = "height:4em;" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                    <div id="tcp-Location" class="col-md-offset-2 col-12 @(startLocation <0 ? "invalid":"")"><span id="tc-Location">@startLocation</span> character(s) left.</div>
                </div>
            </div>

            <div class="form-group" id="qNickname">
                @Html.LabelFor(model => model.Nickname, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Nickname, new { htmlAttributes = new { @class = "form-control count", data_max = nicknameMax } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Nickname, "", new { @class = "text-danger" })
                    <div id="tcp-Nickname" class="col-md-offset-2 col-12 @(startNickname <0 ? "invalid":"")"><span id="tc-Nickname">@startNickname</span> character(s) left.</div>
                </div>
            </div>

            <div class="form-group" id="qBlurb">
                @Html.LabelFor(model => model.Blurb, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    <div class="da-focus">
                        @Html.EditorFor(model => model.Blurb, new { htmlAttributes = new { @class = "form-control count", data_max = blurbMax, style = "height:4em;" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Blurb, "", new { @class = "text-danger" })
                    <div id="tcp-Blurb" class="col-md-offset-2 col-12 @(startBlurb <0 ? "invalid":"")"><span id="tc-Blurb">@startBlurb</span> character(s) left.</div>
                </div>
            </div>

            <div class="form-group" id="qEnvironment">
                @Html.LabelFor(model => model.Environment, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    @Html.EditorFor(model => model.Environment, new { htmlAttributes = new { @class = "form-control rich", style = "height:20em;" } })
                    @Html.ValidationMessageFor(model => model.Environment, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" id="qHazards">
                @Html.LabelFor(model => model.Hazards, htmlAttributes: new { @class = "control-label" })
                <div class="col-12">
                    @Html.EditorFor(model => model.Hazards, new { htmlAttributes = new { @class = "form-control rich", style = "height:20em;" } })
                    @Html.ValidationMessageFor(model => model.Hazards, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" id="qTags">
                <label for="tags">Tags</label>
                <div class="col-12">
                    <select multiple="multiple" name="tags" id="tags">
                        @foreach (var x in ViewBag.Tags)
                        {
                            <option value="@x.TagId" @(theSelected.Contains(x.TagId) ? "selected" : "")>@x.TagName</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group" id="qFinish">
                @if (!Model.IsPublished)
                {
                    <div class="col-md-offset-2 col-12 btn-group">
                        <input type="submit" name="submit" value="Save Progress" class="btn btn-warning" />
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#confirmModal">Publish</button>
                    </div>
                }
                else
                {
                    <p>This item has been made public</p>
                    <div class="col-md-offset-2 col-12 btn-group">
                        <input type="submit" name="submit" value="Un-Publish" class="btn btn-danger" />
                        <input type="submit" name="submit" value="Save" class="btn btn-success" />
                    </div>
                }
                <div class="col-12 col-md-offset-2 btn-group" style="margin-top: 1em;">
                    <input type="submit" name="submit" value="Save and go to complex edit" class="btn btn-info" />
                </div>

            </div>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="confirmModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to publish?</p>
                        <div id="nulled">

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <input type="submit" name="submit" value="Publish" class="btn btn-success" />
                    </div>
                </div>
            </div>
        </div>
    }

        <div style="text-align:left;">
            @Html.ActionLink("Cancel", "Details", new { id = Model.RiftId })
        </div>
</div>
@section Scripts{
    <script src="~/Scripts/MyJS/edit.js"></script>
    <script>
        //slim select tags
        new SlimSelect({
            select: '#tags'
        })
    </script>
    <script>
        var nullables = ['Environment', 'Hazards'];
        $('#confirmModal').on('show.bs.modal', function () {
            ConfirmModal(nullables);
        });
    </script>

}